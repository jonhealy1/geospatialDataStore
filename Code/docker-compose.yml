version: '3'

services:

  # redis:
  #   image: redislabs/rejson
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - "/home/docker/data:/data"
  #   deploy:
  #     placement:
  #       constraints: [node.role == manager]
  #   command: redis-server --appendonly yes
  #   networks:
  #     - webnet

  # main_server:
  #   image: hyephive/geospatialdatastore_main_server
  #   # build: main_server/
  #   deploy:
  #     replicas: 5
  #     resources:
  #       limits:
  #         cpus: "0.1"
  #         memory: 50M
  #     restart_policy:
  #       condition: on-failure
  #   links:
  #     - redis
  #   depends_on:
  #     - redis
  #   environment:
  #     REDIS_URL: redis:6379
  #   # volumes:
  #   #   - .:/go/src/main_server
  #   ports:
  #     - 3030:3001
  #   restart: always
  #   networks:
  #     - webnet

  web_server:
    image: hyephive/geospatialdatastore_web_server
    #build: web_server/
    # deploy:
    #   replicas: 1
    #   resources:
    #     limits:
    #       cpus: "0.1"
    #       memory: 50M
    #   restart_policy:
    #     condition: on-failure
    volumes:
      - .:/go/src/web_server
    ports:
      - 12351:80
    networks:
      - webnet

  potree:
    image: 00theballs00/potree_entwine
    # build: ./potree_entwine
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
      restart_policy:
        condition: on-failure
    # restart: always
    ports:
      - "8085:80"
    networks:
      - webnet

  entwine_conda:
    image: 00theballs00/entwine_conda
    # build: ./entwine
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
      restart_policy:
        condition: on-failure
    # volumes:
    #   - .:/go/src/geospatialDataStore
    depends_on:
      - potree
    ports:
      - "8111:8089"
    networks:
      - webnet

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet

networks:
  webnet: